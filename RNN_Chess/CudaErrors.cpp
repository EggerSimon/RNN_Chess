#include "CudaErrors.h"

const char* CudaErrors::GetCublasStatus(cublasStatus_t cublasStatus)
{
	switch (cublasStatus)
	{
	case CUBLAS_STATUS_NOT_INITIALIZED:
		return "CUBLAS_STATUS_NOT_INITIALIZED";
	case CUBLAS_STATUS_ALLOC_FAILED:
		return "CUBLAS_STATUS_ALLOC_FAILED";
	case CUBLAS_STATUS_INVALID_VALUE:
		return "CUBLAS_STATUS_INVALID_VALUE";
	case CUBLAS_STATUS_ARCH_MISMATCH:
		return "CUBLAS_STATUS_ARCH_MISMATCH";
	case CUBLAS_STATUS_MAPPING_ERROR:
		return "CUBLAS_STATUS_MAPPING_ERROR";
	case CUBLAS_STATUS_EXECUTION_FAILED:
		return "CUBLAS_STATUS_EXECUTION_FAILED";
	case CUBLAS_STATUS_INTERNAL_ERROR:
		return "CUBLAS_STATUS_INTERNAL_ERROR";
	}

	return "cublasStatus <unknown>";
}

const char* CudaErrors::GetCudnnStatus(cudnnStatus_t cudnnStatus)
{
	switch (cudnnStatus)
	{
	case CUDNN_STATUS_ALLOC_FAILED:
		return "CUDNN_STATUS_ALLOC_FAILED";
	case CUDNN_STATUS_ARCH_MISMATCH:
		return "CUDNN_STATUS_ARCH_MISMATCH";
	case CUDNN_STATUS_BAD_PARAM:
		return "CUDNN_STATUS_BAD_PARAM";
	case CUDNN_STATUS_EXECUTION_FAILED:
		return "CUDNN_STATUS_EXECUTION_FAILED";
	case CUDNN_STATUS_INTERNAL_ERROR:
		return "CUDNN_STATUS_INTERNAL_ERRO";
	case CUDNN_STATUS_INVALID_VALUE:
		return "CUDNN_STATUS_INVALID_VALUE";
	case CUDNN_STATUS_LICENSE_ERROR:
		return "CUDNN_STATUS_LICENSE_ERROR";
	case CUDNN_STATUS_MAPPING_ERROR:
		return "CUDNN_STATUS_MAPPING_ERROR";
	case CUDNN_STATUS_NOT_INITIALIZED:
		return "CUDNN_STATUS_NOT_INITIALIZED";
	case CUDNN_STATUS_NOT_SUPPORTED:
		return "CUDNN_STATUS_NOT_SUPPORTED";
	case CUDNN_STATUS_RUNTIME_FP_OVERFLOW:
		return "CUDNN_STATUS_RUNTIME_FP_OVERFLOW";
	case CUDNN_STATUS_RUNTIME_IN_PROGRESS:
		return "CUDNN_STATUS_RUNTIME_IN_PROGRESS";
	case CUDNN_STATUS_RUNTIME_PREREQUISITE_MISSING:
		return "CUDNN_STATUS_RUNTIME_PREREQUISITE_MISSING";
	}

	return "cudnnStatus <unknown>";
}